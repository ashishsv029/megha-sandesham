version: "3"
services:
    redis:
        image: redis:5.0
        container_name: redis
        networks:
            - meghasandesham-main
        volumes:
            - type: volume
              source: redisdata
              target: /var/lib/redis
    
    nginx:
        image: ashishsv029/nginx:23.0.0
        container_name: nginx
        networks:
            - meghasandesham-main
        ports:
            - 80:80
            - 443:443
        depends_on:
            - authentication-service
            - app
            - meghasandesham-frontend
        # volumes: #not needed, as we are not using letsencrypt/certbot challenge
        #     - type: bind
        #       source: /var/www/certbot
        #       target: /var/www/certbot
        #     - type: bind
        #       source: /etc/letsencrypt
        #       target: /etc/letsencrypt

    postgres:
        image: ashishsv029/postgres:1.0.0
        # build: - comment this build when using already built image directly
        #     context: ../
        #     dockerfile: ./docker/postgres/Dockerfile
        container_name: postgres
        # environment:
        #     - POSTGRES_PASSWORD=password --optional if you are creating other databases (as a part of sql file that was copied inside initdb.d file)
        networks:
            - meghasandesham-main
        volumes:
            - type: volume
              source: postgresdata
              target: /var/lib/postgresql/data # by default postgres stored data in this file.. so we need to replace this path with our created volume.. so the data is stored in postgresql container as well as mirrored into volume
        # ports:
        #     - 5432:5432 #Before executing with this, ensure local postgres is stopped, so that host port 5432 is available
    app:
        image: ashishsv029/meghasandesham:7.0.0
        container_name: meghasandesham
        # build: - comment this build when using already built image directly
        #     context: ../
        #     #dockerfile: ./docker/app/Dockerfile
        #     dockerfile: ./docker/app/multistage/Dockerfile
        #     #dockerfile: ./docker/app/multistage/minimalistic-base/Dockerfile
            
        #     target: finalstage #this is not present in plain Dockerfile
        depends_on:
            - redis
            - postgres
            - authentication-service
        entrypoint: [] #["bash", "-c"]
        command: dockerize -wait tcp://redis:6379 -wait tcp://postgres:5432 -timeout 180s bash -c "echo please create an app start script && chmod +x run-app.sh && sh run-app.sh"
                #run a bash file which starts the app and the app's prerequisite command
        
        restart: on-failure
        networks:
            - meghasandesham-main
        ports: # used while local testing
            - 3100:3100
    
    authentication-service:
        image: ashishsv029/authentication-service:12.0.0
        container_name: authentication-service
        depends_on:
            - postgres
        command: dockerize -wait tcp://postgres:5432 -timeout 180s bash -c "echo able to connect to postgres"
        networks:
            - meghasandesham-main
        ports:
            - 3200:3200

    meghasandesham-frontend:
        image: ashishsv029/meghasandesham-ui:13.0.0
        container_name: meghasandesham-frontend
        depends_on:
            - app
            - authentication-service
        networks:
            - meghasandesham-main
        ports:
            - 3000:3000
    # use this command locally to start the ngrok container for using the publicly accessible tunnel URL
    # docker run --net=host -it -e NGROK_AUTHTOKEN=<get it from local> ngrok/ngrok:latest http 443        
    # ngrok: - Commenting as logs are not coming.. need to investigate
    #     image: ngrok/ngrok:latest
    #     network_mode: host
    #     environment:
    #         - NGROK_AUTHTOKEN=<get it from local>
    #     command: http 443 #the traffic is tunnelled to 443 port, where reverse proxy nginx is listening
    #     stdin_open: true
    #     tty: true

        

networks:
    meghasandesham-main:
        driver: bridge

volumes:
    redisdata:
    postgresdata:

      

